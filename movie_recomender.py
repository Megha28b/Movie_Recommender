# -*- coding: utf-8 -*-
"""Movies.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12c65Z2CXJaGiXWJ9Egr3Zi2LXz2c2_e3
"""

# importing dependencies 
import numpy as np
import pandas as pd
import difflib
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity   
# cosine similarity will be used to make similarity graph between movies

# load the data from csv file to pandas dataframe 
movies_data=pd.read_csv('/content/movies.csv')

# printing the first five rows of the data 
movies_data.head()

# check the size of the data (rows x columns )
movies_data.shape

# selecting the features we would use for creating similarity for recomendation
selected_features = ['genres','keywords','tagline','title','cast','director']
print(selected_features)

# replace the null values(if any in selected features) with null string 
for feature in selected_features:
  movies_data[feature]=movies_data[feature].fillna('')

# combine the selected features 
combined_features = movies_data['genres']+' '+movies_data['keywords']+' '+movies_data['tagline']+' '+movies_data['title']+' '+movies_data['cast']+' '+movies_data['director']

print(combined_features)

# convert the text data to feature vectors
vectorizer = TfidfVectorizer()
feature_vectors = vectorizer.fit_transform(combined_features)
# cosine similarity works on numerical values and not on text data, so vectorizer is used to convert the data
print(feature_vectors)

# get the similarity score using the cosine similarity
similarity = cosine_similarity(feature_vectors)
print(similarity)
print(similarity.shape)

"""Movie Recomendation system"""

# Get the input from the user 
movie_name = input('Enter your favourite movie name : ')

# create a list of all the movie titles in the dataset
# This is done to compare with the title given by the user
list_of_titles = movies_data['title'].tolist()

# Find the close match for movie names given by the user 
find_close_match = difflib.get_close_matches(movie_name,list_of_titles)

# This gives the first value in the list that is closest to the title
close_match=find_close_match[0]

# Get the index of the above title that matches with the title
index_of_movie = movies_data[movies_data.title == close_match]['index'].values[0]

# Find the similarity score of all the movies in dataset with respect to the title
similarity_score = list(enumerate(similarity[index_of_movie]))

# Sorting the movies in descending order based upon their similarity score
sorted_similar_m = sorted(similarity_score,key = lambda x:x[1] , reverse= True)

# print the name of the similar movies using the index
print('Movie suggestions : \n')

i=1
# creating a loop in the list of similar movies
for movie in sorted_similar_m:
  index= movie[0]
  # using the index of the movie to find the title
  movie_title = movies_data[movies_data.index == index]['title'].values[0]
  # Printing 20 similar movies
  if (i<21):
    print(i,' ',movie_title)
    i+=1